doctype html
html
	head
		meta(charset='UTF-8')
		title test universe
		style.
			body {
				margin: 0;
				padding: 0;
				overflow: hidden;
			}

			canvas {
				width: 100%;
				height: 100%;
			}
	body
		script(src='three.js/three.js')
		script(src='universe.js')
		script.
			var uni = new Universe()
		script.
			/*
			var SCREEN_WIDTH = window.innerWidth;
			var SCREEN_HEIGHT = window.innerHeight;

			var container;
			var camera, scene, renderer, mesh;
			var cameraRig, activeCamera, activeHelper;
			var cameraPerspective, cameraOrtho;
			var cameraPerspectiveHelper, cameraOrthoHelper;
			var windowHalfX = window.innerWidth / 2;
			var windowHalfY = window.innerHeight / 2;
			var mouseX = 0, mouseY = 0;

			init();
			animate();

			function init() {

				container = document.createElement( 'div' );
				document.body.appendChild( container );

				scene = new THREE.Scene();


				cameraPerspective = new THREE.PerspectiveCamera( 50, SCREEN_WIDTH / SCREEN_HEIGHT, 150, 4000 );

				activeCamera = cameraPerspective;


				var geometry = new THREE.Geometry();
				
				for ( var i = 0; i < 10000; i ++ ) {

					var vertex = new THREE.Vector3();
					vertex.x = THREE.Math.randFloatSpread( 4000 );
					vertex.y = THREE.Math.randFloatSpread( 4000 );
					vertex.z = THREE.Math.randFloatSpread( 4000 );

					geometry.vertices.push( vertex );

				}

				
				var particles = new THREE.PointCloud( geometry, new THREE.PointCloudMaterial( { size: 5 } ) );
				scene.add( particles );

				renderer = new THREE.WebGLRenderer( { antialias: true } );
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize( SCREEN_WIDTH, SCREEN_HEIGHT );
				renderer.domElement.style.position = "relative";
				container.appendChild( renderer.domElement );

				renderer.autoClear = false;


				document.addEventListener( 'mousemove', onDocumentMouseMove, false );
				document.addEventListener( 'touchstart', onDocumentTouchStart, false );
				document.addEventListener( 'touchmove', onDocumentTouchMove, false );
				window.addEventListener( 'resize', onWindowResize, false );

			}

			function onWindowResize( event ) {

				SCREEN_WIDTH = window.innerWidth;
				SCREEN_HEIGHT = window.innerHeight;
				windowHalfX = window.innerWidth / 2;
				windowHalfY = window.innerHeight / 2;

				renderer.setSize( SCREEN_WIDTH, SCREEN_HEIGHT );

				cameraPerspective.aspect = SCREEN_WIDTH / SCREEN_HEIGHT;
				cameraPerspective.updateProjectionMatrix();


			}

			function animate() {

				requestAnimationFrame( animate );

				render();

			}


			function render() {

				var r = Date.now() * 0.0005;

				cameraPerspective.fov = 35 + 90 * Math.sin( 0.5 * r );
				cameraPerspective.updateProjectionMatrix();

				cameraPerspective.position.x += ( mouseX - cameraPerspective.position.x ) * 0.02;
				cameraPerspective.position.y += ( - mouseY - cameraPerspective.position.y ) * 0.02;

				cameraPerspective.lookAt( scene.position );

				renderer.clear();


				renderer.setViewport( 0, 0, SCREEN_WIDTH, SCREEN_HEIGHT );
				renderer.render( scene, cameraPerspective );

			}

			function onDocumentMouseMove( event ) {

				mouseX = event.clientX - windowHalfX;
				mouseY = event.clientY - windowHalfY;

			}

			function onDocumentTouchStart( event ) {

				if ( event.touches.length == 1 ) {

					event.preventDefault();

					mouseX = event.touches[ 0 ].pageX - windowHalfX;
					mouseY = event.touches[ 0 ].pageY - windowHalfY;

				}
			}

			function onDocumentTouchMove( event ) {

				if ( event.touches.length == 1 ) {

					event.preventDefault();

					mouseX = event.touches[ 0 ].pageX - windowHalfX;
					mouseY = event.touches[ 0 ].pageY - windowHalfY;

				}

			}
			*/